#+TITLE: Emacs Config
#+AUTHOR: Matthias Stein
#+DESCRIPTION: This is my living and evolving Emacs config.
#+STARTUP: overview inlineimages

* My Emacs Experience

I looked into Emacs already several years ago, but it was a similar journey to my VIM journey - at first glance it was way too complex (and ugly as hell) and at that point in time I didn't want to invest the time required. As with VIM, frequently revisiting Emacs, watching some YouTube videos about, etc., some basic concepts sank in and I WANTED to use it.

In 2020, I came across some videos from [[https://www.youtube.com/channel/UCVls1GmFKf6WlTraIb_IaJg][DT]] on YouTube, including OrgMode. This was what finally made me invest more time into Emacs. I re-started with [[https://github.com/hlissner/doom-emacs][Doom Emacs]]. I really liked it, especially the usage of the space bar. But there was so much happening, configured, installed, etc. which I all did not grasp - and I do like to understand the programms I am using, at least to a certain degree.

When I came across the [[https://www.youtube.com/watch?v=74zOY-vgkyw][Emacs from Scratch]] series, I thought I would go that route as well, in order to better understand how Emacs functions, and how my config can change the basic behaviour. In addition, I read the [[https://www.gnu.org/software/emacs/manual/html_node/eintr/][ELISP Introduction]] to get a basic understanding of the elisp syntax etc.

This org file you are reading is the literate source of my =init.el= I am currently using.


* Manual Compile
Starting with version 27.1, Emacs no longer defaults to using ImageMagick for displaying images. This interfered with my OrgMode workflow, as the new way to display images created serious lags when typing or moving the point. Apparently this is due to the large amount and large sized pictures in my OrgMode files. With the previous (ImageMagick using) versions, I never had that issue.

So I uninstalled the Debian repository version, and built Emacs from source with ImageMagick support. With that installation, I was able to work with my picture-rich OrgMode files again as I was used to.

#+begin_src shell :tangle no
wget https://ftp.gnu.org/pub/gnu/emacs/emacs-29.1.tar.xz
tar -axvf emacs-29.1.tar.xz
cd emacs-29.1
sudo apt install libmagickcore-dev libmagick++-dev
sudo apt install libxpm-dev libgnutls28-dev
./configure --with-imagemagick
make
sudo make install
#+end_src

* Emacs client :manual_install:
To start =Emacs= faster, I run a daemon at system startup following the instuctions on the [[https://www.emacswiki.org/emacs/EmacsAsDaemon][Emacs Wiki]].

The file =~/.config/systemd/user/emacs.service= is created as follows.
#+begin_src shell :tangle no
[Unit]
Description=Emacs text editor
Documentation=info:emacs man:emacs(1) https://gnu.org/software/emacs/

[Service]
Type=forking
ExecStart=/usr/bin/emacs --daemon
ExecStop=/usr/bin/emacsclient --eval "(kill-emacs)"
Environment=SSH_AUTH_SOCK=%t/keyring/ssh
Restart=on-failure

[Install]
WantedBy=default.target
#+end_src
It is part of my dotfile management, so stowing emacs will create it.

To run the service:
#+begin_src shell :tanle no
systemctl enable --user emacs
systemctl start --user emacs
#+end_src
* init.el and conf.org
When I started with my configuration, I used this =conf.org= (then named =init.el=) file with the header argument

#+BEGIN_EXAMPLE :tangle no
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el=
#+END_EXAMPLE

and a [[Auto-tangle when saving][custom function]] to automatically tangle my =init.org= on save into my =init.el=.

After watching a video from [[https://youtu.be/hoP4I9ounyQ?t=528][DT]], I changed that approach to have the =init.el= load the =conf.org=, so the other way round than before. With the following code, org-babel will check, if the =conf.org= has changed, and tangle it to conf.el if that is the case which it then loads.

#+BEGIN_SRC emacs-lisp :tangle no
(org-babel-load-file
 (expand-file-name
  "conf.org"
  user-emacs-directory))
#+END_SRC

When I watched above mentioned video from DT, I was also trying to figure out for several days, how to best split my configuration. I am using Emacs at home on Ubuntu and at work on Windows10. While I want to use the same settings in both Emacs instances, there are some slight differences due to the different operating systems, and due to slightly different needs/use cases.

With the above method, that =init.el= tangles the org base file, it was easy to add the following:

#+BEGIN_SRC emacs-lisp :tangle no
  (package-initialize)
  (org-babel-load-file
   (expand-file-name
    "conf.org"
    user-emacs-directory))
  (org-babel-load-file
   (expand-file-name
    "conf_home.org"
    user-emacs-directory))
  (org-babel-load-file
   (expand-file-name
    "conf_work.org"
    user-emacs-directory))
#+END_SRC

The =(package-initialize)= needs to be at the beginning of the file, as otherwise the =org-babel-load-file= called before =(package-initialize)= in =conf.org= will load the org version shipped with Emacs, not a later installed newer version.

In the =init.el= on my home computer, I delete the block tangling =conf_work.org=, and at work I delete the block tangling =conf_home.org=, but have the same base settings from =conf.org= everywhere.

This method can also be used, to split this =conf.org= in case it ever becomes unwieldy due to its size/structure to break it down into smaller more manageable chunks.

* Package Management
** Basic Setup

In order to be able to install packages, I set up the package archives.

#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-archives '(("melpa"  . "https://melpa.org/packages/")
                         ("elpa"   . "https://elpa.gnu.org/packages/")
			 ("nongnu" . "https://elpa.nongnu.org/nongnu/")))
;; (package-initialize)
(unless package-archive-contents
 (package-refresh-contents))
#+END_SRC

** use-package

[[https://github.com/jwiegley/use-package][use-package]] seems to be a nicer way to set up packeges and configure them. I saw its use extensively in the [[https://www.youtube.com/watch?v=74zOY-vgkyw][Emacs from Scratch]] series and liked what I saw.

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
   (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+END_SRC

* Startup Performance
Found this setting in [[https://gitlab.com/dwt1/dotfiles/-/blob/master/.emacs.d.gnu/config.org][DT's config]]. It makes startup faster by reducing the frequency of garbage collection.
#+BEGIN_SRC emacs-lisp
;; Using garbage magic hack.
(use-package gcmh
   :config
   (gcmh-mode 1))
;; Setting garbage collection threshold
(setq gc-cons-threshold 402653184
      gc-cons-percentage 0.6)

;; Profile emacs startup
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))
#+END_SRC
* Follow Symlinks, don't ask
#+BEGIN_SRC emacs-lisp
(setq vc-follow-symlinks t)
#+END_SRC
* Backup and auto-save directories
By default, Emacs saves the backup files (={filename}~=) and auto-save files (=#{filename}=) in the same directory as the main file, thus inevitably cluttering the file system.

To save all these files in a central location, which is not in my backup tree, the following lines are used:
#+begin_src lisp
 (setq backup-directory-alist `((".*" . ,"~/.emacs.save")))
 (setq auto-save-file-name-transforms `((".*" ,"~/.emacs.save" t)))
#+end_src

Based on [[https://www.emacswiki.org/emacs/BackupDirectory][the Emacs Wiki]].

* Custom Load Path
For packages that are not available from ELPA, MELPA, etc. I added a folder in my =.emacs.d= directory to the load path. =.el= files I place there manually will be recognized by Emacs.

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lisp-code/")
(add-to-list 'custom-theme-load-path "~/.emacs.d/custom-themes/everforest-theme")
#+END_SRC
* Custom Lisp Code
The =Emacs Lisp= code I use to modify my =Emacs= installation is loaded here.
#+BEGIN_SRC emacs-lisp
;; (load "~/.emacs.d/lisp-code/ms_lisp_utils.el")
(require 'ms-lisp-utils)
#+END_SRC
* Custom Key-Bindings
** keyboard-escape-quit

From VIM and [[* Yay, Evil!][Evil Mode]] I am used to hitting escape all the time to quit out of everything. Standard Emacs behaviour is to use =C-g= to get out of a command, which I never got used to, so I rebound that command to ESC.

#+BEGIN_SRC emacs-lisp
;; Make ESC quit prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+END_SRC

** general.el - <C> stinks, <SPC> rules!

Hitting control all the time with the pinky is a bit awkward; from =DOOM Emacs= I was used to comfortably hit space all the time with either thumb. With [[https://github.com/noctuid/general.el][general.el]] I bring that experience to my config as well.

Here is the setup of =general.el=, and some general Emacs keybindings; most of the key bindings are spread over this config to the relevant sections.

#+BEGIN_SRC emacs-lisp
  (use-package general
    :config
    (general-evil-setup t)
    (general-create-definer ms/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")
    (ms/leader-keys
      ;; GENERAL STUFF
      "gl"   'evil-goto-line
      "cd"   'downcase-dwim
      "cu"   'upcase-dwim
      "tw"   'delete-trailing-whitespace
  
      ;; WINDOWS
      ;; delete windows
      ;; "wd"   'delete-window
      "wd"   'evil-window-delete
      "wo"   'delete-other-windows
      ;; move focus to other window
      ;; "wh"   'windmove-left
      "wh"   'evil-window-left
      ;; "wj"   'windmove-down
      "wj"   'evil-window-down
      ;; "wk"   'windmove-up
      "wk"   'evil-window-up
      ;; "wl"   'windmove-right
      "wl"   'evil-window-right
      ;; create new window
      "wnx"  'evil-window-vnew
      "wny"  'evil-window-new
      "wsx"  'evil-window-vsplit
      "wsy"  'evil-window-split
      ;; window placement
      "wJ"   'evil-window-rotate-downwards
      "wK"   'evil-window-rotate-upwards
      ;; window sizes
      "wb"   'balance-windows
      "wf"   'shrink-window-if-larger-than-buffer
      "wwi"  'evil-window-increase-width
      "wwd"  'evil-window-decrease-width
      "w,"   'evil-window-increase-height
      "w."   'evil-window-decrease-height
  
      ;; BUFFER
      "bb"   'counsel-ibuffer
      "bl"   'evil-next-buffer
      "bh"   'evil-prev-buffer
      "bd"   'kill-current-buffer
      "bo"   'ms/kill-other-buffers
      ))
#+END_SRC

* Appearance
** Minimal UI

First, I made the appearance of Emacs very minimal: I disabled the scrollbar, the toolbar, the tooltips, the menu bar. To the left and right, I added a small margin between window and frame.

This is similar to the program layout I was used to from DOOM Emacs.

#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
(menu-bar-mode -1)
(set-fringe-mode 10)
#+END_SRC

** Start Screen

The standard inital Emacs start screen contains information I do not need, so I suppress it.

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC

** Scratch Buffer
Now, the buffer visible once emacs has opened is the =scratch= buffer. I changed the default text of it from

#+BEGIN_EXAMPLE
;; This buffer is for text that is not saved, and for Lisp evaluation.
;; To create a file, visit it with <open> and enter text in its buffer.
#+END_EXAMPLE

to

#+BEGIN_SRC emacs-lisp
(setq initial-scratch-message ";; ------------========<<<< Welcome to >>>>========-------------
;;
;;   _____ _   _ _    _     ______ __  __          _____  _____
;;  / ____| \\ | | |  | |   |  ____|  \\/  |   /\\   / ____|/ ____|
;; | |  __|  \\| | |  | |   | |__  | \\  / |  /  \\ | |    | (___
;; | | |_ | . ` | |  | |   |  __| | |\\/| | / /\\ \\| |     \\___ \\
;; | |__| | |\\  | |__| |   | |____| |  | |/ ____ \\ |____ ____) |
;;  \\_____|_| \\_|\\____/    |______|_|  |_/_/    \\_\\_____|_____/

")
#+END_SRC

Does this make anything better? No, but I found this function and ... why not?

** all-the-icons :manual_install:

[[https://github.com/domtronn/all-the-icons.el][all-the-icons]] is needed for =DOOM Modeline=, =Dashboard=, and other packages. After installing the package, the actual fonts need to be downloaded with =M-x all-the-icons-install-fonts=.

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons)
#+END_SRC

** Cursor position and line numbers

I like to see the current position both in statusbar and the line numbers in the gutter. In order to make the use of commands like =11 dd= easier for me, I use relative line numbers.

#+BEGIN_SRC emacs-lisp
(column-number-mode)
(global-display-line-numbers-mode 't)
(setq-default display-line-numbers-type 'relative)
(setq-default display-line-numbers-width 7)
#+END_SRC

For certain modes, the line numbers are turned off - I don't need line numbers in a terminal for example.

#+BEGIN_SRC emacs-lisp
(defun disable-line-numbers-mode-per-hook()
  "Disable display-line-numbers-mode in specific modes"
  (let (mode)
  (dolist (mode '(neotree-mode-hook
                  eshell-mode-hook
                  shell-mode-hook
                  term-mode-hook ))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))))
(disable-line-numbers-mode-per-hook)
#+END_SRC

To make it easier for me to orient, the cursors in non-active windows are suppressed. Seeing only one cursor is easier for me to cope with.

#+BEGIN_SRC emacs-lisp
(setq-default cursor-in-non-selected-windows nil)
#+END_SRC

** Emacs, be silent!

I don't like Emacs to beep or blink on me.

#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC

** Emacs, take short answers!

When emacs wants a confirmation or denial, I need to type 'yes' or 'no'. The following sets the expected answer to 'y' or 'n'.

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Font & Line Settings

As I don't want to scroll left and right for long lines, I have Emacs break long logical lines into screen width visual lines. For the current buffer, this behaviour can be changed any time with =M-x global-visual-line-mode=.

#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil :font "MesloLGS NF" :height 100)
  (add-to-list 'default-frame-alist '(font . "MesloLGS NF 12"))
  (global-visual-line-mode 1)
  (nvmap :keymaps 'override :prefix "SPC"
	 ;; visual fill column mode
	 "ovt"  'global-visual-fill-column-mode
	 )
#+END_SRC

** doom-themes

I used [[https://ethanschoonover.com/solarized/][the Solarized Dark color scheme]] for quite some time almost everywhere; but for some time now I tend more towards [[https://draculatheme.com/][Dracula color scheme]]; both are available for Emacs in the [[https://github.com/hlissner/emacs-doom-themes][DOOM Themes]] package.

The custom function =ms/cycle-themes= cycles through five themes: doom-dracula, doom-nord, doom-one, solarized-dark and solarized-light. In addition, the logo shown in =dashboard.el= changes to the logo in the appropriate colors.

#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :config (setq doom-themes-enable-bold t
                doom-themes-enable-italic t)
           ;; (load-theme 'doom-dracula t)
           ;; (load-theme 'doom-nord t)
           ;; (load-theme 'doom-gruvbox t)
           (doom-themes-org-config))
(load-theme 'everforest-hard-dark t)
#+END_SRC

** dashboard.el
Through a video from [[https://youtu.be/hoP4I9ounyQ?t=528][DT]] I learned about [[https://github.com/emacs-dashboard/emacs-dashboard][dashboard.el]] which I now use to replace the scratch buffer start screen, see previous point.

As a pre-requisite, =dashboard.el= needs [[https://github.com/purcell/page-break-lines][page-break-lines.el]].

I replaced the ascii art header with a custom made image, which I created by using the [[https://git.savannah.gnu.org/cgit/emacs.git/tree/etc/images/icons/hicolor/scalable/apps][official emacs.svg]] and changing the colors to those of the [[https://draculatheme.com/contribute][Dracula color scheme]] with an added =GNU Emacs= title.

The custom function =ms/dash-logo= chooses the logo corresponding to the five thems I defined, see [[*doom-themes][doom-themes]]. As fall-back, the doom-one colored logo is chosen.

#+BEGIN_SRC emacs-lisp
(use-package page-break-lines)

(use-package dashboard
  :requires page-break-lines
  :init
  (add-hook 'after-init-hook 'dashboard-refresh-buffer)
  (setq dashboard-startup-banner (ms/dash-logo))
  (setq dashboard-center-content t)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-set-navigator t)
  ;; (setq dashboard-filter-agenda-entry 'dashboard-no-filter-agenda)
  ;; causes horizontal lines to display as ^L for whichever reasons
  (setq dashboard-set-init-info t)
  (setq dashboard-items '((recents  . 10)
                          (bookmarks . 0)
                          (projects . 5)
                          (agenda . 15)
                          (registers . 5)))
  :config
  (dashboard-setup-startup-hook))
#+END_SRC
I run an Emacs server, the actual program I open is opened as a client. By default the client shows the =scratch buffer=. To have it show the dashboard, the following code helps.
#+BEGIN_SRC emacs-lisp
(setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
#+END_SRC
* Statusline

I played around with different statuslines, still changing between them frequently, but it seems I am settling more on doom-modeline.

** doom-modeline

[[https://github.com/seagle0128/doom-modeline][DOOM Modeline]] is the same statusline I was already used to from DOOM Emacs.

#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 20)
           (doom-modeline-icon (display-graphic-p))
           (doom-modeline-major-mode-icon t)
           (doom.modeline-major-mode-color-icon t)
           (doom-modeline-buffer-state-icon t)
           (doom-modeline-buffer-modification-icon t)))
#+END_SRC

** powerline

[[https://github.com/milkypostman/powerline][powerline]] is a powerline I have been using in VIM before.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package powerline
  :init
  (powerline-default-theme))
#+END_SRC

* Completion Framework

The completion framework shows available commands once I begin typing, filtering them down the more I type, add descriptions

** ivy

Ivy provides completion, for example narrowing down the list of similar entries when typing part of a command in =M-x=. The keybindings I saw and copied from the [[https://www.youtube.com/watch?v=74zOY-vgkyw][Emacs from Scratch]] series.

#+BEGIN_SRC emacs-lisp
(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config (ivy-mode 1))
;; M-x M-O -> submenue for entry, like open source code
#+END_SRC

** ivy-rich

[[https://github.com/Yevgnen/ivy-rich][Ivy-rich]] "comes with rich transformers for commands from ivy and counsel"; for example adding a description to the function names that =ivy= filters on.

#+BEGIN_SRC emacs-lisp
(use-package ivy-rich
  :init
  (ivy-rich-mode 1))
#+END_SRC

** counsel

[[https://elpa.gnu.org/packages/counsel.html][counsel]] provides Various completion functions using =ivy=, it is basically a collection of Ivy-enhanced versions of common Emacs commands.

#+BEGIN_SRC emacs-lisp
(use-package counsel
  :bind (("M-x" . counsel-M-x)
         ("C-x b" . counsel-ibuffer)
         ("C-x C-f" . counsel-find-file)
         :map minibuffer-local-map
         ("C-r" . counsel-minibuffer-history))
  :config
  (setq ivy-initial-inputs-alist nil)) ;; Don't start searches with ^
#+END_SRC

** which-key

[[https://github.com/justbur/emacs-which-key][which-key]] displays the possible key bindings following the currently entered incomplete command, which I find very helpful. This is a behaviour I was used to and liked from DOOM Emacs; though I am not sure DOOM also uses =which-key= to achieve that effect.

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config (setq which-key-idle-delay 0.5))
#+END_SRC

* Editor Settings
** Default Coding
#+BEGIN_SRC emacs-lisp
(set-default-coding-systems 'utf-8)
#+END_SRC
** Tabs
I don't like tabs and replace them with spaces. As I use Python most of the time, I set the tab width to 4.
#+BEGIN_EXPORT emacs-lisp
(setq-default tab-width 4)  ;; display existing tabs in file
(setq-default evil-shift-width tab-width)
(setq tab-stop-list '(4 8 12 16 20 24 28 32 36 40 44 48 52 56 60
                          64 68 72 76 80 84 88 92 96 100 104 108 112
                          116 120))  ;; tabs use 4 spaces
(setq sgml-basic-offset 4)  ;; define offset for all sgml modes, e.g. xml, html
(setq-default indent-tabs-mode nil)  ;; don't use tabs, but spaces
#+END_EXPORT
** Eighty Column Rule
To show a "line" at column 80, I use the following setting. Instead of a line, this colors all characters after the 80th to show the 80 rule has been exceeded.
#+BEGIN_SRC emacs-lisp
(use-package column-enforce-mode
  :hook (prog-mode . column-enforce-mode)
  :custom (setq column-enforce-column 80))
#+END_SRC
** rainbow-delimeters

[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimeters]]
colors matching parentheses in matching colors, alternating the color for each new pair. I found this especially helpful for the *L* /ots of/ *I* /rritating/ *S* /uperfluous/ *P* /arentheses language/ ;-) this config is written in.

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

** Scrolling
Emacs' default scrolling behaviour I never got used to, at times it is a bit jumpy.
#+BEGIN_SRC emacs-lisp
(setq scroll-conservatively 101)
(setq mouse-wheel-scroll-amount '(2 ((shift) . 2)))
(setq mouse-wheel-progressive-speed t)
(setq mouse-wheel-follow-mouse 't)
#+END_SRC
** Folding
#+begin_src emacs-lisp
  (use-package origami
    :hook (python-mode . origami-mode))
  (nvmap :keymaps 'override :prefix "SPC" :global-prefix "C-SPC"
	 "otn"  'origami-toggle-node
  )
#+end_src
* helpful

[[https://github.com/Wilfred/helpful][helpful]] is a package I know from the [[https://www.youtube.com/watch?v=74zOY-vgkyw][Emacs from Scratch]] series, and it looked to be really helpful (pun intended). I have not managed to get used to incorporating it into my daily live, though. It allows for more detailed help on functions and other objects, even displaying the source code of them, by enhancing the standard Emacs =describe-= output.

#+BEGIN_SRC emacs-lisp
(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
#+END_SRC

* Yay, Evil!

I use VIM keybindings through the [[https://github.com/emacs-evil/evil][evil]] package. In any mode, evil can be disabled/reenabled with =C-z= to go back to standard emacs mode.

Inspired by the [[https://github.com/hlissner/doom-emacs#introduction]['YAY EVIL!']] image from the =DOOM Emacs= project page, I designed a similar logo based on one of my son's toys that I liked the look of.

[[./imgs/evil.png]]

An idea that I really liked I got from the [[https://www.youtube.com/watch?v=74zOY-vgkyw][Emacs from Scratch]] series: Disable the arrow keys with a reminder to stick with evil =hjkl= movement; use =x=, =d-w=, etc, for deleting; see [[https://github.com/daviwil/dotfiles/blob/master/Emacs.org#lets-be-evil][daviwil/dotfiles]].

I was a bit distressed by Emacs opening new window splits left and up; I don't know why, but I always expected them to open right and down. Luckily Emacs does what its user wants and expects :-)
** Doh!
   There is a very evil pitfall with =EVIL=; by default =EVIL= seems to bind =C-i= to ='evil-jump-forward= - and =C-i= is equivalent to =TAB=, which makes =orgmode= headlines unfoldable, for example!

In =evil-maps.el=:

#+BEGIN_SRC emacs-lisp :tangle no
(when evil-want-C-i-jump
  (define-key evil-motion-state-map (kbd "C-i") 'evil-jump-forward))
#+END_SRC

So this needs to be disabled before loading =EVIL=:

#+BEGIN_SRC emacs-lisp
(setq evil-want-C-i-jump nil)
#+END_SRC

** LOAD =EVIL=
#+BEGIN_SRC emacs-lisp
;; (defun ms/use-evil-keys ()
;;   (interactive)
;;   (message "Stick to EVIL keys!"))
(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-cross-lines t)
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  :config
  (evil-mode)
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
  (define-key evil-normal-state-map (kbd "<left>") 'ms/use-evil-keys)
  (define-key evil-normal-state-map (kbd "<right>") 'ms/use-evil-keys)
  (define-key evil-normal-state-map (kbd "<down>") 'ms/use-evil-keys)
  (define-key evil-normal-state-map (kbd "<up>") 'ms/use-evil-keys)
  (define-key evil-normal-state-map (kbd "<DEL>") 'ms/use-evil-keys)
  (evil-global-set-key 'motion (kbd "<left>") 'ms/use-evil-keys)
  (evil-global-set-key 'motion (kbd "<right>") 'ms/use-evil-keys)
  (evil-global-set-key 'motion (kbd "<down>") 'ms/use-evil-keys)
  (evil-global-set-key 'motion (kbd "<up>") 'ms/use-evil-keys)
  (evil-global-set-key 'motion (kbd "<up>") 'ms/use-evil-keys))
#+END_SRC
** evil-collections

[[https://github.com/emacs-evil/evil-collection][evil-collection]] apparently fixes some issues with =evil= which does not seem to work equally well in /all parts of Emacs/.

#+BEGIN_SRC emacs-lisp
(use-package evil-collection
  :after evil
  :init
  (setq evil-collection-company-use-tng nil)  ;; Is this a bug in evil-collection?
  :custom
  (evil-collection-outline-bind-tab-p nil)
  :config
  (setq evil-collection-mode-list '(dashboard dired ibuffer))
  (evil-collection-init))
#+END_SRC

** evil-multiedit

Before I started to work with VIM and Emacs, I lived for many years in [[https://www.sublimetext.com/][Sublime Text 3]] and still love many of the shortcuts they introduced, like =C-d= to select the next occurence of the currently selected text. I found some oppinions online, that with the standard VIM keys you can achieve similar or even better effects, but until now I just can't live without these shortcuts.

[[https://github.com/hlissner/evil-multiedit][evil-multiedit]] to the rescue!

#+BEGIN_SRC emacs-lisp :tangle no
(use-package evil-multiedit
  :after evil
  :config
  ;; Highlights all matches of the selection in the buffer.
  (define-key evil-visual-state-map "R" 'evil-multiedit-match-all)

  ;; Match the word under cursor (i.e. make it an edit region). Consecutive presses will
  ;; incrementally add the next unmatched match.
  (define-key evil-normal-state-map (kbd "M-d") 'evil-multiedit-match-and-next)
  ;; Match selected region.
  (define-key evil-visual-state-map (kbd "M-d") 'evil-multiedit-match-and-next)
  ;; Insert marker at point
  (define-key evil-insert-state-map (kbd "M-d") 'evil-multiedit-toggle-marker-here)

  ;; Same as M-d but in reverse.
  (define-key evil-normal-state-map (kbd "M-D") 'evil-multiedit-match-and-prev)
  (define-key evil-visual-state-map (kbd "M-D") 'evil-multiedit-match-and-prev)

  ;; OPTIONAL: If you prefer to grab symbols rather than words, use
  ;; `evil-multiedit-match-symbol-and-next` (or prev).

  ;; Restore the last group of multiedit regions.
  (define-key evil-visual-state-map (kbd "C-M-D") 'evil-multiedit-restore)

  ;; RET will toggle the region under the cursor
  (define-key evil-multiedit-state-map (kbd "RET") 'evil-multiedit-toggle-or-restrict-region)

  ;; ...and in visual mode, RET will disable all fields outside the selected region
  (define-key evil-motion-state-map (kbd "RET") 'evil-multiedit-toggle-or-restrict-region)

  ;; For moving between edit regions
  (define-key evil-multiedit-state-map (kbd "C-n") 'evil-multiedit-next)
  (define-key evil-multiedit-state-map (kbd "C-p") 'evil-multiedit-prev)
  (define-key evil-multiedit-insert-state-map (kbd "C-n") 'evil-multiedit-next)
  (define-key evil-multiedit-insert-state-map (kbd "C-p") 'evil-multiedit-prev)

  ;; Ex command that allows you to invoke evil-multiedit with a regular expression, e.g.
  (evil-ex-define-cmd "ie[dit]" 'evil-multiedit-ex-match))
#+END_SRC

** evil-snipe
* Dired
In order to make the usage of =Dired= more convenient for me, I use the following keybindings.

#+BEGIN_SRC emacs-lisp
  (nvmap :keymaps 'override :prefix "SPC" :global-prefix "C-SPC"
    "dw" 'ms/enter-wdired-in-normal-mode
    "ds" 'wdired-finish-edit
    "de" 'wdired-abort-changes
  )
#+END_SRC
* Orgmode

[[https://orgmode.org/][Orgmode]] is one of the main reasons that got me to use Emacs. It is like the swiss-army-knife of everything.

** IMPORTANT: please install Org from GNU ELPA as Org ELPA will close before Org 9.6 
See [[https://emacs.stackexchange.com/questions/70081/how-to-deal-with-this-message-important-please-install-org-from-gnu-elpa-as-o][stackexchange]]. To solve this:

+ start =emacs= with =emacs -q=. Then =M-x list-packages=. Delete all installed =org-*= packages.
+ From =setq package-archives= remove the line =("org" . "https://orgmode.org/elpa/")=
+ =rm -rf ~/.emacs.d/elpa/org-*=
+ add =:pin elpa= to =(use-package org=
+ restart =Emacs Gui=

** GnuPG Org File encryption
[[https://orgmode.org/worg/org-tutorials/encrypting-files.html][Orgfiles can be .gpg encrypted.]] First line needs to be

#+begin_src orgmode :tangle no
# -*- mode:org; epa-file-encrypt-to: ("me@mydomain.com") -*-
#+end_src

Uncomment the ignore line only [[https://www.masteringemacs.org/article/keeping-secrets-in-emacs-gnupg-auth-sources][when issues occur]] (happens with certain .gpg versions, I had this in Termux).
#+BEGIN_SRC emacs-lisp
(require 'epa-file)
(epa-file-enable)
;; (fset 'epg-wait-for-status 'ignore)
#+END_SRC
** Align Tags
Type =C-u C-c C-q= to align all tags in the current buffer. This is touched upon briefly in Section 6.2 of the manual ("Setting Tags").
** Header Font

This function I saw also in the [[https://www.youtube.com/watch?v=74zOY-vgkyw][Emacs from Scratch]] series, my version of it makes headers use the non-monospaced Ubuntu font, and changes the font size.

#+BEGIN_SRC emacs-lisp
(defun ms/org-font-setup ()
  (dolist (face '((org-level-1 . 1.25)
                  (org-level-2 . 1.20)
                  (org-level-3 . 1.15)
                  (org-level-4 . 1.10)
                  (org-level-5 . 1.05)
                  (org-level-6 . 1.05)
                  (org-level-7 . 1.05)
                  (org-level-8 . 1.05)))
    (set-face-attribute (car face) nil :font "Ubuntu" :weight 'bold :height (cdr face))))
#+END_SRC

** Basic configuration
In the general configuration I define:
+ the available ToDo states
+ a unicode arrow to replace the three trailing dots after headers when they are folded
+ automatically indent text according to it's parent heading's level

#+BEGIN_SRC emacs-lisp
  (use-package org-contrib
    :ensure t)
  (use-package org
    :pin elpa
    :config
    (setq org-todo-keywords
      '((sequence "TODO" "WAIT" "|" "DONE" "QUIT" )))
    (setq org-ellipsis "⤵")
    (setq org-startup-indented t)
    (setq org-adapt-indentation t)
    (setq org-src-preserve-indentation t)
    (setq org-image-actual-width 400)
    (setq org-startup-with-inline-images "inlineimages")
    ;; (setq org-image-actual-width (/ (display-pixel-width) 3))
    (setq org-hide-leading-stars t)
    (setq org-log-done 'note)
    (setq org-hide-emphasis-markers t)
    (ms/org-font-setup))
#+END_SRC

** html export

When I first used =M-x org-export-html-to-file=, I Emacs asked me to install [[https://github.com/hniksic/emacs-htmlize][htmlize]] - after that installation html export worked as expected.

#+BEGIN_SRC emacs-lisp
(use-package htmlize)
#+END_SRC

** Fancy Asterixes/Bullets
   By default, orgmode shows asterix(es) in front of headlines and +/- for list items. The following packages change that behaviour. The one I am currently using is the one without the =:tangle no= behind the source block beginning.
*** org-bullets
   [[https://github.com/sabof/org-bullets][org-bullets]] replaces the asterixes in front of headlines with a unicode arrow as well as leading asterixes with a blank.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package org-bullets
  :init
  (setq org-bullets-bullet-list '("›" "›" "›" "›" "›" "›"))
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

*** org-superstar-mode

[[https://github.com/integral-ms/org-superstar-mode][org-superstar-mode]] replaces the asterixes in front of headlines with a unicode arrow as well as leading asterixes with a blank.

#+BEGIN_SRC emacs-lisp
(use-package org-superstar
  :hook
  (org-mode . (lambda () (org-superstar-mode 1)))
  :init (org-superstar-mode 1)
  (setq org-superstar-headline-bullets-list '("›"))
  (setq org-superstar-leading-bullet ?\s)
  (setq org-superstar-item-bullet-alist '((?* . ?•)
                                        (?+ . ?➤)
                                        (?- . ?•))


 ))



#+END_SRC

** Fixed width centered Orgmode

Another thing I saw in the [[https://www.youtube.com/watch?v=74zOY-vgkyw][Emacs from Scratch]] series that I liked, is to use [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] to center orgmode buffers with a 80 characters width.

#+BEGIN_SRC emacs-lisp
(defun ms/org-mode-visual-fill ()
  (setq visual-fill-column-width 100)
  (setq visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook
  (org-mode . ms/org-mode-visual-fill))
#+END_SRC

** org-babel-languages

This section configures all the languages of source blocks that I use, and want my emacs to be able to handle.

#+BEGIN_SRC emacs-lisp :tangle no
(with-eval-after-load 'org
  (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . t)
        (python . t)
        (css . t)
        (haskell . t)
        (sass . t)
        (shell . t)
        (sql . t)
        (sqlite . t))))
#+END_SRC

** org-make-toc
[[https://github.com/alphapapa/org-make-toc][org-make-toc]] allows for auto-generation of a table of content in a file.

#+BEGIN_SRC emacs-lisp
(use-package org-make-toc)
#+END_SRC

** Clocking Time

At work I sometimes have the need to clock time. I set [[general.el - <C> stinks, <SPC> rules!][custom keybindings]] for the three functions I sometimes use, and configured the idle time to be 10 minutes.
#+BEGIN_SRC emacs-lisp
;;(setq org-clock-idle-time 10)
#+END_SRC

** Auto-tangle when saving

To automatically tangle all the code blocks =.org= files, I added the following code block. Again, I got this from the [[https://www.youtube.com/watch?v=74zOY-vgkyw][Emacs from Scratch]] series.

For this to work, the following header argument needs to be set:

#+BEGIN_EXAMPLE
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el
#+END_EXAMPLE

First, I only had this activated for my =init.el=, =ms/org-babel-tangle-config=. As I have my dotfiles save somewhere central and then [[https://github.com/matthias-stein/dotfiles][stow them]], I had to ammend the function. My first real own from scratch emacs-lisp programming :sunglasses:

I later replaced this by the more general [[https://github.com/daviwil/dotfiles/blob/master/Emacs.org#automatically-tangle-on-save][ms/org-babel-auto-tangle-on-save]].

Still later on, I replaced that with
=org-babel-load-file= in my =init.el=, see [[init.el and conf.org][above]]. Therefore the two options below are commented and are not applied anymore. I left them in in case the approach described above is of help to anyone.

#+BEGIN_SRC emacs-lisp :tangle no
    ;; (defun ms/org-babel-tangle-config ()
    ;;   (when (string-equal (substring buffer-file-name -8) "init.org")
    ;;     (let ((org-config-babel-evaluate nil))
    ;;       (org-babel-tangle))))

    ;;(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook 'ms/org-babel-tangle-config)))

    ;; (defun ms/org-babel-auto-tangle-on-save ()
    ;;   ;; Dynamic scoping to the rescue
    ;;   (let ((org-confirm-babel-evaluate nil))
    ;;     (org-babel-tangle)))

    ;; (add-hook 'org-mode-hook (
    ;;   lambda () (
    ;;     add-hook 'after-save-hook #'ms/org-babel-auto-tangle-on-save
    ;;              'run-at-end 'only-in-org-mode)))

#+END_SRC
** Org Presentations
To use org files as presentations, I use [[https://github.com/takaxp/org-tree-slide][org-tree-slide]], as the starting point for the configuration I used the ones from [[https://github.com/daviwil/dotfiles/blob/master/Emacs.org#org-present][Systemcrafters]] again.
#+BEGIN_SRC emacs-lisp
(use-package org-tree-slide
  :diminish
  :bind
  (:map org-mode-map
        ("<f8>" . org-tree-slide-mode)
   :map org-tree-slide-mode-map
        ("<f9>" . org-tree-slide-move-previous-tree)
        ("<f10>" . org-tree-slide-move-next-tree)
        ("<f11>" . org-tree-slide-content))
  :hook
  ((org-tree-slide-play . (lambda ()
                            (text-scale-increase 3)
                            (org-display-inline-images)
                            (setq org-hide-emphasis-markers t)
                            (setq display-line-numbers nil)))
   (org-tree-slide-stop . (lambda ()
                            (text-scale-increase 0)
                            (org-display-inline-images)
                            (setq org-hide-emphasis-markers nil)
                            (setq display-line-numbers 1)
                            (ms/org-font-setup))))
  :custom
  (org-tree-slide-in-effect t)
  (org-tree-slide-heading-emphasis t)
  (org-tree-slide-header t)
  (org-tree-slide-breadcrumbs " ❱ ")
  (org-tree-slide-activate-message "Show'em!")
  (org-tree-slide-deactivate-message "Well done, mate!")
  (org-image-actual-width nil))
#+END_SRC
** Org Roam
#+BEGIN_SRC emacs-lisp
    (use-package org-roam
      :after
	org
      :custom
	(org-roam-directory "~/data/orgs")
	(org-roam-completion-everywhere t)
      ;; :bind (("C-c n l" . org-roam-buffer-toggle)
	     ;; ("C-c n f" . org-roam-node-find)
	     ;; ("C-c n i" . org-roam-node-insert)
	     ;; :map org-mode-map
	     ;; ("C-M-i"   . completion-at-point))
      :init
	(setq org-roam-v2-ack t)
	(setq org-roam-capture-templates
	      '(("t" "test" plain "%?"
		 :target (file+head "test/${slug}.org"
				    "#+TITLE: ${title}\n\n")
		 :unnarrowed t)
		("u" "utst" plain "%?"
		 :target (file+head "utst/${slug}.org"
				    "#+TITLE: ${title}\n\n")
		 :unnarrowed t)))
  ;;      (add-to-list 'display-buffer-alist
  ;;		   '("\\*org-roam\\*"
  ;;		     (display-buffer-in-direction)
  ;;		     (direction . right)
  ;;		     (window-width . 0.25)
  ;;		     (window-height . fit-window-to-buffer)))
	(add-to-list 'display-buffer-alist
		     '("\\*org-roam\\*"
		       (display-buffer-in-side-window)
		       (side . right)
		       (slot . 0)
		       (window-width . 0.33)
		       (window-parameters . ((no-other-window . t)
					     (no-delete-other-windows . t)))))
      :config
	(org-roam-setup)
	(org-roam-db-autosync-mode))
#+END_SRC
** Org Keybindings
Setting =general.el= keybindings for =orgmode=.
#+BEGIN_SRC emacs-lisp
  (nvmap :keymaps 'override :prefix "SPC" :global-prefix "C-SPC"
	 ;;org agenda
	 "oca"  'org-agenda
	 ;; org babel
	 "obt"  'org-babel-tangle
	 ;; org capture
	 "ocn"  'org-capture  ;; org capture note
	 ;; org clock
	 "oci"  'org-clock-in
	 "oco"  'org-clock-out
	 "occ"  'org-clock-cancel
	 "ocd"  'org-clock-display
	 "ocr"  'org-clock-report
	 "ocu"  'org-clock-update-time-maybe
	 ;; org display toggles
	 "odb"  'org-hide-block-toggle
	 "odd"  'org-hide-drawer-toggle
	 "odi"  'org-toggle-inline-images
	 "odl"  'org-toggle-link-display
	 ;; org id
	 "oid"  'org-id-get-create
	 "ois"  'org-id-store-link
	 ;; org link
	 "oli"  'org-insert-link
	 "ols"  'org-store-link
	 ;; org lists
	 "olc"  'org-toggle-checkbox
	 ;; org roam
	 "orb"  'org-roam-buffer-toggle
	 "orf"  'org-roam-node-find
	 "ori"  'org-roam-node-insert
	 "orc"  'completion-at-point
	 ;; org source blocks
	 "osi"  'org-edit-special
	 "oso"  'org-edit-source-exit
	 "osx"  'org-edit-src-abort
	 ;; org structure templates
	 "ost"  'org-insert-structure-template
	 ;; org tags 'labels'
	 "ots"  'org-set-tags-command
	 ;; org timestamps
	 "oti"  'org-time-stamp
	 "otu"  'org-timestamp-up
	 "otd"  'org-timestamp-down
	 "ote"  'org-evaluate-time-range
	 ;; org todo states
	 "otr"  'org-todo
	 "oft"  'ms/org-todo-buffer
  )
#+END_SRC
** ox-json
For certain flows I need org files exported to structured data, which I then process with Python scripts (if I knew Emacs Lisp, I could probably just do that in Emacs as well...). For the conversion to JSON I use [[https://github.com/jlumpe/ox-json][ox-json]].
   #+BEGIN_SRC emacs-lisp
     (use-package ox-json
       :after org)
   #+END_SRC
** om-to-xml :manual_install:
For certain flows I need org files exported to structured data, which I then process with Python scripts (if I knew Emacs Lisp, I could probably just do that in Emacs as well...). For the conversion to xml I use [[https://github.com/nms/org-to-xml][Norman Walsh's om-to-xml]]. A prerequiste for that is [[https://github.com/ndwarshuis/org-ml][org-ml]].

I download the latest =om-to-xml.el= from GitHub into my [[Custom Load Path][Custom Load Path]].
#+BEGIN_SRC emacs-lisp
(use-package org-ml)
(require 'om-to-xml)
#+END_SRC
* Auto Reload Buffers
In order to have an opened buffer reload from its underlying file if that gets changed on the system by another program, =global-auto-revert-mode= is enabled.
#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode 1)
#+END_SRC
* Files
#+BEGIN_SRC emacs-lisp
(nvmap :states '(normal visual) :keymaps 'override :prefix "SPC" :global-prefix "C-SPC"
       "ff"   'counsel-find-file
       "fc"  '(lambda ()
                      (interactive)
                      (find-file (expand-file-name "~/.emacs.d/conf.org")))
       )
#+END_SRC
* Manual Installation Steps
The =init.el= generated from this org file will install most of the needed packages by itself. The exeptions are linked to here, and the corresponding headlines have the tag =:manual_install:= assigned.

+ [[all-the-icons]]
+ [[om-to-xml][om-to-xml]]

* Language Packages
** Langugage Server Protocol
To make Emacs more IDE like for programmin tasks, the following packages are installed. I learned of it, and copied below configuration mostly, from [[https://github.com/daviwil/emacs-from-scratch/blob/master/Emacs.org][System Crafters]], other snippets are from [[https://emacs-lsp.github.io/lsp-mode/page/installation/][lsp mode installation]].

*** lsp-mode
[[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]] (language server protocol) "/aims to provide IDE-like experience by providing optional integration with the most popular Emacs packages/". 
#+BEGIN_SRC emacs-lisp
    (defun ms/lsp-mode-setup ()
      """copied from System Crafters"""
      (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
      (lsp-headerline-breadcrumb-mode))
  
  ;;  (use-package lsp-mode
  ;;    :commands (lsp lsp-deferred)
  ;;    :hook (lsp-mode . ms/lsp-mode-setup)
  ;;    :init
  ;;    (setq lsp-keymap-prefix "C-c l"))
  (use-package lsp-mode
    :init
    (setq lsp-keymap-prefix "C-c l")
    :commands lsp
    :hook
    (lsp-mode . ms/lsp-mode-setup)
    (lsp-mode . lsp-enable-which-key-integration)
    )
#+END_SRC
*** lsp-ui
[[https://emacs-lsp.github.io/lsp-ui/][lsp-ui]] brings UI enhancements like showing information of the object at point.
#+BEGIN_SRC emacs-lisp
  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom)
    (lsp-ui-doc-delay 2)
    (lsp-ui-doc-show-with-cursor t)
    (lsp-ui-sideline-show-diagnostics t)
    (lsp-ui-sideline-show-hover t)
    (lsp-ui-sideline-show-code-actions t)
    (lsp-ui-sideline-delay 2))
#+END_SRC
*** lsp-treemacs
=lsp-treemacs= provides "/Integration between lsp-mode and treemacs and implementation of treeview controls using treemacs as a tree renderer./"; so for example shows where in the file/folder/project a function is used, a symbol tree of the current file, etc. Most importantly (for me at least), it provides a buffer that lists all errors and warnings in the current file. See [[*lsp key-bindings][lsp key-bindings]].
#+BEGIN_SRC emacs-lisp
(use-package lsp-treemacs
  :after lsp-mode)
#+END_SRC
*** lsp-ivy
[[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]] integrates =Ivy= with =lsp-mode= which allows to search for objects, providing a list o results that narrow down the more you type in the minibuffer. See [[*lsp key-bindings][lsp key-bindings]].

When I run for example =lsp-ivy-workspace-symbol=, I get the message, that the server used (see ) does not support the workspace/symbol method. So currently I cannot use this, I need to look into using another Python server if I ever miss this functionality too much. For the time being, =lsp-treemacs-symbols= provides me with the same result in another form.
#+BEGIN_SRC emacs-lisp
(use-package lsp-ivy
  :after lsp-mode)
#+END_SRC
*** dap-mode
[[https://github.com/emacs-lsp/dap-mode][dap-mode]] is similar to LSP, but connects to the Debug Adapter Protocol.  an excellent package for bringing rich debugging capabilities to Emacs via the Debug Adapter Protocol. 

#+BEGIN_SRC emacs-lisp
  (use-package dap-mode
    :after lsp-mode
    :commands dap-debug
    :config
    ;; Set up Node debugging
    (require 'dap-node)
    (dap-node-setup) ;; Automatically installs Node debug adapter if needed
  
    ;; Bind `C-c l d` to `dap-hydra` for easy access
    (general-define-key
      :keymaps 'lsp-mode-map
      :prefix lsp-keymap-prefix
      "d" '(dap-hydra t :wk "debugger")))
#+END_SRC
*** company-mode
[[https://company-mode.github.io/][company-mode]] (COMplete ANYthing) is a completion framework.

We also use company-box to further enhance the look of the completions with icons and better overall presentation.

#+BEGIN_SRC emacs-lisp
  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
	   ("<tab>" . company-complete-selection))
	  (:map lsp-mode-map
	   ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))
#+END_SRC
  
*** company-box
[[https://github.com/sebastiencs/company-box][company-box]] is an icon front-end for =company-mode=.
#+BEGIN_SRC emacs-lisp
  (use-package company-box
    :hook (company-mode . company-box-mode))
#+END_SRC
*** lsp key-bindings
Setting =general.el= keybindings for =lsp-mode=.
#+BEGIN_SRC emacs-lisp
  (nvmap :keymaps 'override :prefix "SPC" :global-prefix "C-SPC"
	 "lem" 'lsp-evil-multiedit-highlights
	 "lfd" 'lsp-find-definition
	 "lis" 'lsp-ivy-workspace-symbol
	 "lig" 'lsp-ivy-global-workspace-symbol
	 "lte" 'lsp-treemacs-errors-list
	 "lth" 'lsp-treemacs-call-hierarchy
	 "ltr" 'lsp-treemacs-references
	 "lts" 'lsp-treemacs-symbols
	 )
#+END_SRC
*** Python — lsp-pyright                                     :manual_install:
  [[https://emacs-lsp.github.io/lsp-pyright/][lsp-mode client]] for Python development, leveraging Pyright language server.
  
#+BEGIN_SRC shell :tangle no
pip install python-lsp-server 
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package lsp-pyright
    :after lsp-mode
    :ensure t
    :hook (python-mode . (lambda ()
		     (require 'lsp-pyright)
		     (lsp-deferred)))
    :custom
    ;; NOTE: Set these if Python 3 is called "python3" on your system!
    (python-shell-interpreter "python3")
    (dap-python-executable "python3")
    ;; NOTE: Set these if Python 3 is called "python3" on your system!
    (dap-python-debugger 'debugpy)
    :config
    (require 'dap-python))
#+END_SRC

*** XML                                                      :manual_install:
The [[https://emacs-lsp.github.io/lsp-mode/page/lsp-xml/][lsp-XML]] package is installed with =M-x= , =lsp-install-server= , =RET= , =xmlls= , =RET=. 
#+begin_src emacs-lisp
  (setq lsp-xml-format-join-content-lines t
	lsp-xml-format-split-attributes t)
#+end_src
** Haskell
#+BEGIN_SRC emacs-lisp
(use-package haskell-mode)
#+END_SRC
** JSON
   #+BEGIN_SRC emacs-lisp
   (use-package json-mode)
   #+END_SRC
** Lilypond
#+BEGIN_SRC emacs-lisp :tangle no
(require 'lilypond)
#+END_SRC
** pyvenv.el
[[https://github.com/jorgenschaefer/pyvenv][pyvenv.el]] enables Emacs to use Python virtual environments.You can use the pyvenv package to use virtualenv environments in Emacs. With =M-x pyvenv-activate= a virtual environment in a specific folder can be enabled. =lsp-mode= and =dap-mode= are supposed to use the chosen virtual environment.

#+BEGIN_SRC emacs-lisp
(use-package pyvenv
  :after python-mode
  :config
  (pyvenv-mode 1))
#+END_SRC
** web-mode.el
To support editing =html=, =css= and =JavaScript=, I use [[https://web-mode.org/][web-mode.el]].
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :mode
    (".html?$"
     ".jinja$")
  :config
    (setq web-mode-markup-indent-offset 4
          web-mode-css-indent-offset 4
          web-mode-code-indent-offset 4
          web-mode-style-padding 4
          web-mode-script-padding 4
          web-mode-enable-auto-closing t
          web-mode-enable-auto-opening t
          web-mode-enable-auto-pairing t
          web-mode-enable-auto-indentation t))
#+END_SRC
** Jinja2-mode
To enable Jinja2 syntax highlighting, I use [[http://github.com/paradoxxxzero/jinja2-mode][jinja2-mode]].
#+begin_src emacs-lisp
  (use-package jinja2-mode
    :mode ".html.j2$")
#+end_src
** sass-mode.el
To enable SASS syntax hightlighting, I use [[https://github.com/antonj/scss-mode][scss-mode]]. I do not want =scss-mode.el= to compile my =.sass= files on save (I do that somewhere else in my workflow).
#+begin_src  emacs-lisp
  (use-package scss-mode
    :mode (".scss$" ".sass$")
    :config
    (setq scss-compile-at-save nil)) 
#+end_src
* Folder Tree View
There are several options for Emacs to display a list of the current project's files, files of a specific folder, etc.

I initially used (and still use mainly) =neotree=, but when I installed =lsp-mode=, some features use =treemacs= so it was installed as a dependency. Since I had it installed I also played around with it.
** Neotree
[[https://github.com/roflmuffin/emacs-neotree][Neotree]] is a file/folder tree window which I find more comfortable when working with a bunch of files, that opening each file via =SPC-f-f=. It also provides an overview of files in a project.

#+BEGIN_SRC emacs-lisp
(use-package neotree
  :config
  (setq neo-smart-open t)  ;; when neotree opens jumps to current file
  (setq neo-window-width 40)
  (setq neo-theme (if (display-graphic-p) 'icons))
  (setq projectile-switch-project-action 'neotree-projectile-action))

(nvmap :prefix "SPC"
  "n t"   'neotree-toggle
  "SPC"   'neotree-enter  ;; Open File / Unfold Directory
  "n r"   'neotree-refresh  ;; Refresh
  "n m"   'neotree-stretch-toggle  ;; Maximize / Minimize
  ;;""   'neotree-change-root  ;; Switch Root Directory
  "n h"   'neotree-hidden-file-toggle  ;; Toggle hidden files
  "n n"   'neotree-rename-node  ;; Rename a Node
  ;; ""   'neotree-delete-node  ;; Delete a Node
  "n c"   'neotree-create-node  ;; Create file or dir (when ends with /)
  )
#+END_SRC
** Treemacs
[[https://github.com/Alexander-Miller/treemacs][Treemacs]] is "/a tree layout file explorer for Emacs/".
#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :ensure t
  :defer t)
#+END_SRC

*** Treemacs Evil
#+BEGIN_SRC emacs-lisp
(use-package treemacs-evil
  :after (treemacs evil)
  :ensure t)
#+END_SRC

*** Treemacs Projectile
#+BEGIN_SRC emacs-lisp
(use-package treemacs-projectile
  :after (treemacs projectile)
  :ensure t)
#+END_SRC

*** Treemacs Icons Dired
Treemac icons can be used in dired buffers.
#+BEGIN_SRC emacs-lisp :tangle no
(use-package treemacs-icons-dired
  :after (treemacs dired)
  :ensure t
  :config (treemacs-icons-dired-mode))
#+END_SRC

*** Treemacs Magit
#+BEGIN_SRC emacs-lisp :tangle no
(use-package treemacs-magit
  :after (treemacs magit)
  :ensure t)
#+END_SRC

*** Treemacs Persp
#+BEGIN_SRC emacs-lisp :tangle no
(use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
  :after (treemacs persp-mode) ;;or perspective vs. persp-mode
  :ensure t
  :config (treemacs-set-scope-type 'Perspectives))
#+END_SRC
* Projectile
#+BEGIN_QUOTE
Projectile]] is a project interaction library for Emacs. Its goal is
to provide a nice set of features operating on a project level
without introducing external dependencies (when feasible).

--- Projectile homepage
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :config
  (projectile-global-mode 1))
#+END_SRC
* command-log-mode
To be able to demonstrate =Emacs=, I use command-log-mode.
#+BEGIN_SRC emacs-lisp
(use-package command-log-mode)
#+END_SRC
* ToDo Collection
Here I collect topics I have read about and want to explore more in detail, but haven't found the time for so far.

+ [[https://github.com/hlissner/evil-snipe][evil-snipe]]
+ [[https://github.com/marcwebbie/auto-virtualenv][auto-virtualenv]]
+ [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]]
+ [[https://github.com/abo-abo/hydra][hydra]]
+ [[https://github.com/victorhge/iedit][iedit]] / [[https://emacs-lsp.github.io/lsp-mode/page/integration/iedit/][lsp iedit]]
+ [[https://github.com/gregsexton/origami.el][origami.el]]
+ [[https://github.com/lewang/ws-butler][ws-butler]]
* Some helpful commands

This is an unordered list of commands I want to be able to look up quickly.

+ =C-h v user-init-file= shows path of currently used =init.el=
+ =M-x org-toggle-link-display= in orgmode, show formatted or source links
+ =C-x C-e= evaluate emacs-lisp expression *before* point (so put point on closing parenthesis to execute command *in* parenthesis)
+ =M-x eval-buffer= evaluates the whole buffer

* Config Fixes
Here are fixes that I run at the end of my config, without which I got errors.

** error running timer 'org-indent-initialize-agent
This error was solved by reloading org at he end. I guess I would need to re-arrange the order in which I load packages, but I am not sure, which constellation causes the error.
#+BEGIN_SRC emacs-lisp :tangle no
(org-reload)
(evil-mode)
#+END_SRC
